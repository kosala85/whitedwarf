<?php

namespace Data\Repositories;

use Data\Core\Abstracts\RepositoryAbstract;
use Data\Core\Interfaces\RepositoryInterface;
use Data\Models\Hello;
use Data\Models\User;

class HelloRepository extends RepositoryAbstract implements RepositoryInterface
{

    /**
     * Select that can be manipulated using a filters array.
     *
     * @param array $arrFilters [[ <string>'field', <integer>1 (operator), <mixed>'value' ]
     *                          [ <string>'field', <integer>1 (operator), <mixed>'value' ]]
     * @return array
     */
    public function select($arrFilters = [])
    {
        // define filter mappings to table columns ___
        //      (NOTE: 'filter_name' => 'mapped_table_column_name',
        //              'another_filter_name' => null
        //              null is mapped to fields that will be treated as static filters)
        $arrMappings = [

        ];

        // rebuild the filters array to be compatible with the repository ___
        $arrFilters = $this->rebuildFilter($arrFilters, $arrMappings);

        // where conditions that should be assigned regardless of the presence or the absence of filters ___
        $arrWhere = [

        ];

        // add where conditions based on static filters ___
//        if($arrFilters['static']['trip_status'] == 1)
//        {
//            $arrWhere[] = ['status', '=', 10, true];
//        }

        // combine where conditions generated by dynamic conditions sent through filters to the main set of where conditions ___
        $arrWhere = array_merge($arrWhere, $arrFilters['dynamic']);

        // add joins ___
        $arrJoins = [
//            ['LEFT JOIN', User::TABLE . ' U', 'U.id', 'H.user_id'],
//            ['LEFT JOIN', Type::TABLE . ' T', 'T.id', 'H.type_id'],
        ];

        // add ordering ___
        $arrOrder = [
//            ['column_1' => 'ASC'],
//            ['column_2', 'DESC']
        ];

        // add fetch limit ___
        $arrLimit = [
//            offset,
//            limit
        ];

        // add return columns ___
        $arrColumns = [
//            'H.id',
//            'H.name',
//            'H.description',
        ];

        return $this->db->select(Hello::TABLE . ' AS H', $arrJoins, $arrWhere, $arrOrder, $arrLimit, $arrColumns);
    }


    /**
     * Select a single item using its primary key value.
     *
     * @param $intId
     * @return array
     */
    public function selectItem($intId)
    {
        // should map item identifier to primary key field ___
        $arrWhere = [
            ['H.id', '=', $intId]
        ];

        // add joins ___
        $arrJoins = [
//            ['LEFT JOIN', User::TABLE . ' U', 'U.id', 'H.user_id'],
//            ['LEFT JOIN', Type::TABLE . ' T', 'T.id', 'H.type_id'],
        ];

        // add return columns ___
        $arrColumns = [
//            'H.id',
//            'H.name',
//            'H.description',
        ];

        return $this->db->select(Hello::TABLE . ' AS H', $arrJoins, $arrWhere, [], [], $arrColumns);
    }


    /**
     * Select data from the base table by different criteria.
     *
     * @param array $arrWhere [['column_1', '=', 'value'],['column_2', '=', 'value', 'OR'],['column_2', 'LIKE', '%value%'],
     *                         ['column_2', 'IN', [1, 2, 3]],['column_2', 'BETWEEN', [value_1, value_2]]]
     * @param array $arrOrder [['column_1' => 'ASC'], ['column_2', 'DESC']]
     * @param array $arrLimit [offset, limit]
     * @param array $arrColumns ['column_1', 'column_2', ...]
     * @return array
     */
    public function selectBy($arrWhere = [], $arrOrder = [], $arrLimit = [], $arrColumns = [])
    {
        return $this->db->select(Hello::TABLE, [], $arrWhere, $arrOrder, $arrLimit, $arrColumns);
    }


    /**
     * Get a count from the base table by different criteria.
     *
     * @param array $arrWhere [['column_1', '=', 'value'],['column_2', '=', 'value', 'OR'],['column_2', 'LIKE', '%value%'],
     *                         ['column_2', 'IN', [1, 2, 3]],['column_2', 'BETWEEN', [value_1, value_2]]]
     * @return integer
     */
    public function count($arrWhere = [])
    {
        return $this->db->count(Hello::TABLE, $arrWhere);
    }


    /**
     * Insert a record in to the base table.
     *  (NOTE: The db adapter also supports bulk insets through
     *         insertBulk($strTable, $arrColumns, $arrValues) method)
     *
     * @param $arrRecord ['column_1' = > value_1, 'column_2' => value_2, ...]
     * @return array
     */
    public function insert($arrRecord)
    {
        return $this->db->insert(Hello::TABLE, $arrRecord);
    }


    /**
     * Update a record in the base table.
     *
     * @param $intId
     * @param $arrSet ['column_1' => value_1, 'column_2' => value_2, ...]
     * @return array
     */
    public function update($intId, $arrSet)
    {
        // should map item identifier to primary key field ___
        $arrWhere = [
            ['id', '=', $intId]
        ];

        return $this->db->update(Hello::TABLE, $arrSet, $arrWhere);
    }
}